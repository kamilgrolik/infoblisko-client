# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = Comment | CommentAggregator | CommentConnection | CommentConnectionAuthor | CommentConnectionCreatedAt | CommentConnectionId | CommentConnectionIncident | CommentConnectionMessage | CommentConnectionUpdatedAt | CommentConnection_id | CommentGroupBy | Incident | IncidentAggregator | IncidentConnection | IncidentConnectionAuthor | IncidentConnectionCreatedAt | IncidentConnectionId | IncidentConnectionImage | IncidentConnectionMessage | IncidentConnectionUpdatedAt | IncidentConnection_id | IncidentGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionCreatedAt | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionUpdatedAt | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createCommentPayload | createIncidentPayload | createRolePayload | createUserPayload | deleteCommentPayload | deleteIncidentPayload | deleteRolePayload | deleteUserPayload | updateCommentPayload | updateIncidentPayload | updateRolePayload | updateUserPayload

type Comment {
  _id: ID!
  author: String
  createdAt: DateTime!
  id: ID!
  incident: Incident
  message: String
  updatedAt: DateTime!
}

type CommentAggregator {
  count: Int
  totalCount: Int
}

type CommentConnection {
  aggregate: CommentAggregator
  groupBy: CommentGroupBy
  values: [Comment]
}

type CommentConnectionAuthor {
  connection: CommentConnection
  key: String
}

type CommentConnectionCreatedAt {
  connection: CommentConnection
  key: DateTime
}

type CommentConnectionId {
  connection: CommentConnection
  key: ID
}

type CommentConnectionIncident {
  connection: CommentConnection
  key: ID
}

type CommentConnectionMessage {
  connection: CommentConnection
  key: String
}

type CommentConnectionUpdatedAt {
  connection: CommentConnection
  key: DateTime
}

type CommentConnection_id {
  connection: CommentConnection
  key: ID
}

type CommentGroupBy {
  _id: [CommentConnection_id]
  author: [CommentConnectionAuthor]
  createdAt: [CommentConnectionCreatedAt]
  id: [CommentConnectionId]
  incident: [CommentConnectionIncident]
  message: [CommentConnectionMessage]
  updatedAt: [CommentConnectionUpdatedAt]
}

type Incident {
  _id: ID!
  author: String
  comments(limit: Int, sort: String, start: Int, where: JSON): [Comment]
  createdAt: DateTime!
  id: ID!
  image: UploadFile
  message: String!
  updatedAt: DateTime!
}

type IncidentAggregator {
  count: Int
  totalCount: Int
}

type IncidentConnection {
  aggregate: IncidentAggregator
  groupBy: IncidentGroupBy
  values: [Incident]
}

type IncidentConnectionAuthor {
  connection: IncidentConnection
  key: String
}

type IncidentConnectionCreatedAt {
  connection: IncidentConnection
  key: DateTime
}

type IncidentConnectionId {
  connection: IncidentConnection
  key: ID
}

type IncidentConnectionImage {
  connection: IncidentConnection
  key: ID
}

type IncidentConnectionMessage {
  connection: IncidentConnection
  key: String
}

type IncidentConnectionUpdatedAt {
  connection: IncidentConnection
  key: DateTime
}

type IncidentConnection_id {
  connection: IncidentConnection
  key: ID
}

type IncidentGroupBy {
  _id: [IncidentConnection_id]
  author: [IncidentConnectionAuthor]
  createdAt: [IncidentConnectionCreatedAt]
  id: [IncidentConnectionId]
  image: [IncidentConnectionImage]
  message: [IncidentConnectionMessage]
  updatedAt: [IncidentConnectionUpdatedAt]
}

type Mutation {
  createComment(input: createCommentInput): createCommentPayload
  createIncident(input: createIncidentInput): createIncidentPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  deleteIncident(input: deleteIncidentInput): deleteIncidentPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  updateIncident(input: updateIncidentInput): updateIncidentPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Query {
  comment(id: ID!): Comment
  comments(limit: Int, sort: String, start: Int, where: JSON): [Comment]
  commentsConnection(limit: Int, sort: String, start: Int, where: JSON): CommentConnection
  files(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  incident(id: ID!): Incident
  incidents(limit: Int, sort: String, start: Int, where: JSON): [Incident]
  incidentsConnection(limit: Int, sort: String, start: Int, where: JSON): IncidentConnection
  me: UsersPermissionsMe
  role(id: ID!): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  createdAt: DateTime!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
  updatedAt: DateTime!
}

type UsersPermissionsRole {
  _id: ID!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  updatedAt: DateTime!
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionCreatedAt {
  connection: UsersPermissionsRoleConnection
  key: DateTime
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionUpdatedAt {
  connection: UsersPermissionsRoleConnection
  key: DateTime
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  createdAt: [UsersPermissionsRoleConnectionCreatedAt]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
  updatedAt: [UsersPermissionsRoleConnectionUpdatedAt]
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type createCommentPayload {
  comment: Comment
}

type createIncidentPayload {
  incident: Incident
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createUserPayload {
  user: UsersPermissionsUser
}

type deleteCommentPayload {
  comment: Comment
}

type deleteIncidentPayload {
  incident: Incident
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type updateCommentPayload {
  comment: Comment
}

type updateIncidentPayload {
  incident: Incident
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateUserPayload {
  user: UsersPermissionsUser
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

input CommentInput {
  author: String
  incident: ID
  message: String
}

input FileInput {
  alternativeText: String
  caption: String
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  url: String!
  width: Int
}

input IncidentInput {
  author: String
  comments: [ID]
  image: ID
  message: String!
}

input InputID {
  id: ID!
}

input RoleInput {
  description: String
  name: String!
  permissions: [ID]
  type: String
  users: [ID]
}

input UserInput {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input createCommentInput {
  data: CommentInput
}

input createIncidentInput {
  data: IncidentInput
}

input createRoleInput {
  data: RoleInput
}

input createUserInput {
  data: UserInput
}

input deleteCommentInput {
  where: InputID
}

input deleteIncidentInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editCommentInput {
  author: String
  incident: ID
  message: String
}

input editFileInput {
  alternativeText: String
  caption: String
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  url: String
  width: Int
}

input editIncidentInput {
  author: String
  comments: [ID]
  image: ID
  message: String
}

input editRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

input updateCommentInput {
  data: editCommentInput
  where: InputID
}

input updateIncidentInput {
  data: editIncidentInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long